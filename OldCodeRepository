	/*
	public void run(){
		//This code taken from Dr Duvall's ExampleBounce.java shell
		Scene scene = initializeGameObjects();
		stage.setScene(scene);
		stage.setTitle("Breakout: Laboratory Edition. Level " + levelNum);
		stage.show();
		
		KeyFrame f = new KeyFrame(Duration.millis(FRAME_DELAY_MILLISECONDS), e -> step());
		Timeline t = new Timeline();
		t.setCycleCount(Timeline.INDEFINITE); //will probably change when add more levels - need to research!
		t.getKeyFrames().add(f);
		t.play();
	}
	*/
				/*
			rows = 2; //for testing purposes
			
			int blockNum = 1;
			double xPos = spacing;
			double yPos = spacing;
			for(int r = 0; r < rows; r++){
				for(int c = 0; c < cols; c++){
					if(blockNum % 10 == 0){
						grid[r][c] = new HClBlock(xPos, yPos, block_width, block_height);
					}
					else if(blockNum % 2 == 0){
						grid[r][c] = new GlasswareBlock(xPos, yPos, block_width, block_height); //note the constructor of GlasswareBlock already draws in on screen! No need to call drawSelf()
					}
					xPos += (spacing + block_width);
					blockNum++;
				}
				xPos = spacing;
				yPos += (spacing + block_height);
			}
			*/
			
				    int rowsForFullScreen = (int)(screen_height / (spacing + block_height));
	    //rows = rowsForFullScreen - (17-level); //change 17 to function of width later - need to play with this formula
	    		/*
		if(xVel > 0){
			System.out.println("Left");
			sideHit =  "Left";
		}
		if(xVel < 0){
			System.out.println("Right");
			sideHit =  "Right";
		}
		if(yVel > 0){
			System.out.println("Top");
			sideHit = "Top";
		}
		if(yVel < 0){
			System.out.println("Bottom");
			sideHit = "Bottom";
		}
		*/
				/*
		if(sideHit.equals("Left") || sideHit.equals("Right"))
			xVel *= -1;
		else if(sideHit.equals("Top") || sideHit.equals("Bottom"))
			yVel *= -1;
		*/
				/*
		Scanner scanner = new Scanner(new File(POWERUP_LOCATIONS_FILENAME));
		Map<String, List<String>> powerupLocations = new HashMap<>();
		for(int currentLevelNumber = 1; currentLevelNumber <= Driver.NUM_LEVELS; currentLevelNumber++){
			if(currentLevelNumber == level){
				String[] lineSplit = scanner.nextLine().split(" ");
				totalRows = Integer.parseInt(lineSplit[1]);
				String currentBlockType = "";
				for(int entry = 2; entry <= lineSplit.length; entry++){
					if(lineSplit[entry].equals("HClBlock")){
						currentBlockType = "HClBlock";
						powerupLocations.put("HClBlock", new ArrayList<>());
					}
					else if(lineSplit[entry].equals("MSDSBlock")){
						currentBlockType = "MSDSBlock";
						powerupLocations.put("MSDSBlock", new ArrayList<>());
					}
					else if(lineSplit[entry].equals("CatalystBlock")){
						currentBlockType = "CatalystBlock";
						powerupLocations.put("CatalystBlock", new ArrayList<>());
					}
					else{
						powerupLocations.get(currentBlockType).add(lineSplit[entry]);
					}
				}
			}
		}
		scanner.close();
		System.out.println(powerupLocations);
		*/
				/*
		if(level == 1){

			
			int blockPositionNum = 1;
			double xPos = BLOCK_SPACING;
			double yPos = BLOCK_SPACING;
			for(int r = 0; r < totalRows; r++){
				for(int c = 0; c < TOTAL_COLS; c++){
					if(r % 4 == 1 || r % 4 == 3){
						if(c != 0 && c!= TOTAL_COLS-1)
							grid[r][c] = new GlasswareBlock(xPos, yPos, BLOCK_WIDTH, BLOCK_HEIGHT);
					}
					if(r % 4 == 2){
						if(c == 1 || c == TOTAL_COLS-2)
							grid[r][c] = new GlasswareBlock(xPos, yPos, BLOCK_WIDTH, BLOCK_HEIGHT);
					}
					//For powerup blocks
					if(blockPositionNum % 20 == 0){
						grid[r][c] = new CatalystBlock(xPos, yPos, BLOCK_WIDTH, BLOCK_HEIGHT);
					}

					blockPositionNum++;
					xPos += (BLOCK_SPACING + BLOCK_WIDTH);
				}
				xPos = BLOCK_SPACING;
				yPos += (BLOCK_SPACING + BLOCK_HEIGHT);
			}
		}
		else if(level == 2){
			
			double xPos = BLOCK_SPACING;
			double yPos = BLOCK_SPACING;
			for(int r = 0; r < totalRows; r++){
				for(int c = 0; c < TOTAL_COLS; c++){
					if(r % 2 == 1 || c % 2 == 1){
						grid[r][c] = new GlasswareBlock(xPos, yPos, BLOCK_WIDTH, BLOCK_HEIGHT);
					}
					//Powerup blocks
					if(r == 5 && c == 2){
						grid[5][2] = new HClBlock(xPos, yPos, BLOCK_WIDTH, BLOCK_HEIGHT);
					}
					if(r == 1 && c == 1){
						grid[1][1] = new CatalystBlock(xPos, yPos, BLOCK_WIDTH, BLOCK_HEIGHT);
					}
					if(r == 1 && c == 11){
						grid[1][11] = new HClBlock(xPos, yPos, BLOCK_WIDTH, BLOCK_HEIGHT);
					}
					xPos += (BLOCK_SPACING + BLOCK_WIDTH);
				}
				xPos = BLOCK_SPACING;
				yPos += (BLOCK_SPACING + BLOCK_HEIGHT);
			}
		}
		else if(level == 3){
			
			//Make HCl blocks every 10th possible block space
			int blockNum = 1;
			double xPos = BLOCK_SPACING;
			double yPos = BLOCK_SPACING;
			for(int r = 0; r < totalRows; r++){
				for(int c = 0; c < TOTAL_COLS; c++){
					if(blockNum % 10 == 0){
						grid[r][c] = new HClBlock(xPos, yPos, BLOCK_WIDTH, BLOCK_HEIGHT);
					}
					else if(blockNum % 2 == 0){
						grid[r][c] = new GlasswareBlock(xPos, yPos, BLOCK_WIDTH, BLOCK_HEIGHT); //note the constructor of GlasswareBlock already draws in on screen! No need to call drawSelf()
					}
					xPos += (BLOCK_SPACING + BLOCK_WIDTH);
					blockNum++;
				}
				xPos = BLOCK_SPACING;
				yPos += (BLOCK_SPACING + BLOCK_HEIGHT);
			}
		}
		*/